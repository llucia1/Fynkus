<?php
declare(strict_types=1);
namespace Tests\Common\Infrastructure\Bus\Command;

use GridCP\Common\Domain\Bus\Command\Command;
use GridCP\Common\Infrastructure\Bus\Command\CommandNotRegisteredError;
use GridCP\Common\Infrastructure\Bus\Command\InMemorySymfonyCommandBus;
use http\Exception\RuntimeException;
use PHPUnit\Framework\TestCase;


class InMemorySymFonyCommandBusTest extends TestCase
{
    private InMemorySymfonyCommandBus|null $commandBus;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->commandBus = new InMemorySymfonyCommandBus([$this->commandHandler()]);
    }

    public function testHandlerCommand():void
    {
        $this->throwException( new \RuntimeException());
        $this->commandBus->dispatch(new FakeCommand());
    }
    public function testIfNotCommandRegistered():void
    {
        $this->throwException(new CommandNotRegisteredError(new FakeCommand()));
        $this->commandBus->dispatch($this->command());
    }

    private function commandHandler():object
    {
        return  new class(){
            public  function __invoke(FakeCommand $command): never
            {
                throw new RuntimeException('This Work Fine!!!');
            }
        };
    }

    private function command():Command
    {
        return $this->getMockBuilder(Command::class)->disableOriginalConstructor()->getMock();
    }
}